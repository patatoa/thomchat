name: Deploy to AWS App Runner

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build & Push Frontend Image
        run: |
          FRONTEND_REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/thomchat-frontend
          docker build \
          --build-arg VITE_SOCKET_URL="${{ vars.REACT_APP_SOCKET_URL }}" \
          -t thomchat-frontend ./frontend
          docker tag thomchat-frontend:latest $FRONTEND_REPO:latest
          docker push $FRONTEND_REPO:latest

      - name: Build & Push Backend Image
        run: |
          BACKEND_REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/thomchat-backend
          docker build -t thomchat-backend ./backend
          docker tag thomchat-backend:latest $BACKEND_REPO:latest
          docker push $BACKEND_REPO:latest

      - name: Deploy Frontend to AWS App Runner
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='thomchat-frontend-service'].ServiceArn" --output text)

          IAM_ROLE_ARN="${{ secrets.IAM_ROLE_ARN }}"

          if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" == "None" ]; then
            echo "Creating frontend-service..."
            aws apprunner create-service --service-name thomchat-frontend-service \
              --source-configuration '{
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "'"$IAM_ROLE_ARN"'"
                },
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/thomchat-frontend:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "3000",
                    "RuntimeEnvironmentVariables": {
                      "VITE_SOCKET_URL": "${{ vars.REACT_APP_SOCKET_URL }}"
                    }
                  }
                },
                "AutoDeploymentsEnabled": true
              }'
          fi

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Deploy WebSocket Server to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T \
            -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
          docker stop thomchat-backend || true
          docker rm thomchat-backend || true
          
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/thomchat-backend:latest
          
          docker run -d -p 8000:8000 --name thomchat-backend \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/thomchat-backend:latest
          
          EOF