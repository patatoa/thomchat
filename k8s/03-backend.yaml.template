apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: thomchat-app
  labels:
    app: backend
spec:
  replicas: 3  # Now we can scale to multiple replicas
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: ${ECR_URL}/thomchat-backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: KAFKA_BROKERS
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: thomchat-app
  labels:
    app: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # Network Load Balancer for thomchat
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"  # Longer timeout for thomchat
    # Adding sticky sessions for thomchat connections
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: "stickiness.enabled=true,stickiness.type=lb_cookie"
    # TLS termination
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "${ACM_CERTIFICATE_ARN}"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
spec:
  selector:
    app: backend
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  - name: https
    port: 443
    targetPort: 8000
  type: LoadBalancer